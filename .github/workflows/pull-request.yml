name: Pull Request Checks

on: pull_request

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Build Docker Environment
        run: |
          cp .env.example .env
          docker compose up -d

      - name: Check for Modified Python Files
        run: echo "template_py_diff=$(git diff --name-only --diff-filter=ACMRTUXB origin/$GITHUB_BASE_REF | grep  -E "(.py$)" | tr "\n" " ")" >> $GITHUB_ENV

      - name: Install Python Linters
        run: |
          python3 -m pip install flake8==7.1.1 black==24.10.0

      - name: Run All Linting Checks
        run: |
          # Run Black
          if [ -n "$template_py_diff" ]; then
            echo "Running Black..."
            python3 -m black ${{env.template_py_diff}} --check
          fi

          # Run Flake8
          if [ -n "$template_py_diff" ]; then
            echo "Running Flake8..."
            python3 -m flake8 ${{env.template_py_diff}} --ignore=E501,F405,W503
          fi

          # Run Pylint
          echo "Running Pylint..."
          docker compose run web pylint django_template apps tests

          # Run djhtml
          echo "Running djhtml..."
          docker compose run web djhtml templates --check

  check-migrations:
    name: Check for Migrations
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: lint-and-format

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Build Docker Environment
        run: |
          cp .env.example .env
          docker compose up -d

      - name: Check for Missing Migrations
        run: docker compose run web bash -c "python manage.py makemigrations --dry-run --check | grep -v 'admin_sso'"

  run-tests:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint-and-format, check-migrations]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Build Docker Environment
        run: |
          cp .env.example .env
          docker compose up -d

      - name: Run Tests with Coverage
        run: docker compose run web pytest -n auto --cov=apps --cov-report=json --cov-report=term-missing

      - name: Check Coverage Percentage
        run: |
          COVERAGE=$(jq '.totals.percent_covered' coverage.json)
          if (( $(echo "$COVERAGE < 100" |bc -l) )); then
            echo "Coverage is below 100%"
            exit 1
          fi

      - name: Upload Code Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          flags: unittests
          files: coverage.json